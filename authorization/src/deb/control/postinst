#!/bin/sh
# postinst script for arrowhead-authorization
#
# see: dh_installdeb(1)

set -e

. /usr/share/debconf/confmodule

SYSTEM_NAME="authorization"
PKG_NAME="arrowhead-authorization"

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see https://www.debian.org/doc/debian-policy/ or
# the debian-policy package

case "$1" in
    configure)
        . /usr/share/arrowhead/conf/ahconf.sh
        SYSTEM_DIR="${AH_SYSTEMS_DIR}/${SYSTEM_NAME}"

        echo "Configuring MySQL database..." >&2
        ah_db_user

        if [ ! -d "${SYSTEM_DIR}" ]; then
            mkdir -p ${SYSTEM_DIR}
        fi

        ah_cert_signed_system ${SYSTEM_NAME}

        if [ ! -f "${SYSTEM_DIR}/default.conf" ]; then
            /bin/cat <<EOF >${SYSTEM_DIR}/default.conf
############################################
###       APPLICATION PARAMETERS         ###
############################################

# Database parameters (mandatory)
db_user=arrowhead
db_password=${AH_PASS_DB}
db_address=jdbc:mysql://127.0.0.1:3306/arrowhead

# Certificate related paths and passwords (mandatory in secure mode)
keystore=${SYSTEM_DIR}/${SYSTEM_NAME}.p12
keystorepass=${AH_PASS_CERT}
keypass=${AH_PASS_CERT}
truststore=${AH_CONF_DIR}/truststore.p12
truststorepass=${AH_PASS_CERT}

# Authorization web-server parameters
address=0.0.0.0
insecure_port=8444
secure_port=8445

# Service Registry web-server parameters (to register the Authorization services)
sr_address=0.0.0.0
sr_insecure_port=8442
sr_secure_port=8443

#Allow querying access to the authorization tables for application systems (true/false - only has effect in secure mode)
enable_auth_for_cloud=false

############################################
###          LOGGING PARAMETERS          ###
############################################

# Define the root logger with appender file
log4j.rootLogger=INFO, DB, FILE

# Database related config
# Define the DB appender
log4j.appender.DB=org.apache.log4j.jdbc.JDBCAppender
# Set Database URL
log4j.appender.DB.URL=jdbc:mysql://127.0.0.1:3306/arrowhead
# Set database user name and password
log4j.appender.DB.user=arrowhead
log4j.appender.DB.password=${AH_PASS_DB}
# Set the SQL statement to be executed.
log4j.appender.DB.sql=INSERT INTO logs(id, date, origin, level, message) VALUES(DEFAULT,'%d{yyyy-MM-dd HH:mm:ss}','%C','%p','%m')
# Define the layout for file appender
log4j.appender.DB.layout=org.apache.log4j.PatternLayout
# Disable Hibernate verbose logging
log4j.logger.org.hibernate=fatal

# File related config
# Define the file appender
log4j.appender.FILE=org.apache.log4j.FileAppender
# Set the name of the file
log4j.appender.FILE.File=/var/log/arrowhead/${SYSTEM_NAME}.log
# Set the immediate flush to true (default)
log4j.appender.FILE.ImmediateFlush=true
# Set the threshold to debug mode
log4j.appender.FILE.Threshold=debug
# Set the append to false, overwrite
log4j.appender.FILE.Append=false
# Define the layout for file appender
log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
log4j.appender.FILE.layout.conversionPattern=%d{yyyy-MM-dd HH:mm:ss}, %C, %p, %m%n
EOF
            chown root:arrowhead ${SYSTEM_DIR}/default.conf
            chmod 640 ${SYSTEM_DIR}/default.conf
        fi

        #ah_log4j_conf ${SYSTEM_NAME}

        echo "Restarting ${PKG_NAME}..." >&2
        systemctl daemon-reload
        systemctl restart ${PKG_NAME}.service
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
